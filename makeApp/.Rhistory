choices = alphabet,
selected = "")
myWord5Input <- selectInput(inputId ="myWord5", label = "Fifth letter of my word:",
choices = alphabet,
selected = "")
myUIBW <- fluidPage(
#title
titlePanel("Beating Wordle", windowTitle = "Beating Wordle"),
sidebarLayout(
mainPanel(
myWord1Input,
myWord2Input,
myWord3Input,
myWord4Input,
myWord5Input,
containInput,
notContainInput,
notHere1Input,
notHere2Input,
notHere3Input,
notHere4Input,
notHere5Input),
sidebarPanel(
tableOutput("table")
)
)
)
library(tidyverse)
words <-read.csv("valid_solutions.csv")
fiveLet <- words %>%
mutate(let1 = str_sub(words$word, 1,1)) %>%
mutate(let2 = str_sub(words$word, 2,2)) %>%
mutate(let3 = str_sub(words$word, 3,3)) %>%
mutate(let4 = str_sub(words$word, 4,4)) %>%
mutate(let5 = str_sub(words$word, 5,5))
alphabet <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z")
myWord <- matrix(nrow = 26, ncol = 5)
contain <- vector(length = 5, mode = "list")
notContain <- vector(length = 26, mode = "list")
notHere <- matrix(nrow = 26, ncol = 5)
# goals of server
# 1 take input and add it into vectors/matrix that i initialize
# 2 use these vectors/matrix to display a tibble of possible words
myServerBW <- function(input, output){
output$table <- renderTable({
First <- ""
Second <- ""
Third <- ""
Fourth <- ""
Fifth <- ""
# put yellows here as a string
yellow <- ""
#put greys here as a string
grey <- ""
# when a letter is correct but not in this spot as a string
notFirst <- ""
notSecond <- ""
notThird <- ""
notFourth <- ""
notFifth <- ""
#### ####
contain <-c(str_split(yellow,"",n=nchar(yellow), simplify = T))[1:5]
contain[is.na(contain)] <- ""
notContain <- c(str_split(grey,"",n=nchar(grey), simplify =T))[1:nchar(grey)]
notContain[is.na(notContain)] <- ""
notHere[,1] <- c(str_split(notFirst,"",n=nchar(notFirst), simplify = T))[1:26]
notHere[,2] <- c(str_split(notSecond,"",n=nchar(notSecond), simplify = T))[1:26]
notHere[,3] <- c(str_split(notThird,"",n=nchar(notThird), simplify = T))[1:26]
notHere[,4] <- c(str_split(notFourth,"",n=nchar(notFourth), simplify = T))[1:26]
notHere[,5] <- c(str_split(notFifth,"",n=nchar(notFifth), simplify = T))[1:26]
notHere[is.na(notHere)] <- ""
myWord[,1] <- if(First==""){alphabet}else{First}
myWord[,2] <- if(Second==""){alphabet}else{Second}
myWord[,3] <- if(Third==""){alphabet}else{Third}
myWord[,4] <- if(Fourth==""){alphabet}else{Fourth}
myWord[,5] <- if(Fifth==""){alphabet}else{Fifth}
possibleWords <- fiveLet %>%
filter(let1 %in% myWord[,1]) %>%
filter(let2 %in% myWord[,2]) %>%
filter(let3 %in% myWord[,3]) %>%
filter(let4 %in% myWord[,4]) %>%
filter(let5 %in% myWord[,5]) %>%
filter(grepl(contain[1],word)) %>%
filter(grepl(contain[2],word)) %>%
filter(grepl(contain[3],word)) %>%
filter(grepl(contain[4],word)) %>%
filter(grepl(contain[5],word)) %>%
filter(!(let1 %in% notContain)) %>%
filter(!(let2 %in% notContain)) %>%
filter(!(let3 %in% notContain)) %>%
filter(!(let4 %in% notContain)) %>%
filter(!(let5 %in% notContain)) %>%
filter(!(let1 %in% notHere[,1])) %>%
filter(!(let2 %in% notHere[,2])) %>%
filter(!(let3 %in% notHere[,3])) %>%
filter(!(let4 %in% notHere[,4])) %>%
filter(!(let5 %in% notHere[,5]))
allLetters <- matrix(nrow = 5*nrow(possibleWords), ncol = 1)
allLetters[,1] <-c(possibleWords$let1,possibleWords$let2, possibleWords$let3,
possibleWords$let4, possibleWords$let5)
allLetters <- as.data.frame(allLetters) %>%
group_by(V1) %>%
summarize(count = n()) %>%
rename(letter = V1)
possibleWords$score <- score(possibleWords$word)
possibleWords <- possibleWords %>%
arrange(-score)
#### ####
t <- tibble(head(possibleWords,5))
print(t)
})
}
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
words <-read.csv("valid_solutions.csv")
fiveLet <- words %>%
mutate(let1 = str_sub(words$word, 1,1)) %>%
mutate(let2 = str_sub(words$word, 2,2)) %>%
mutate(let3 = str_sub(words$word, 3,3)) %>%
mutate(let4 = str_sub(words$word, 4,4)) %>%
mutate(let5 = str_sub(words$word, 5,5))
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library(tidyverse)
words <-read.csv("valid_solutions.csv")
fiveLet <- words %>%
mutate(let1 = str_sub(words$word, 1,1)) %>%
mutate(let2 = str_sub(words$word, 2,2)) %>%
mutate(let3 = str_sub(words$word, 3,3)) %>%
mutate(let4 = str_sub(words$word, 4,4)) %>%
mutate(let5 = str_sub(words$word, 5,5))
write.csv(fiveLet, file = "fiveLet")
fiveLet <-read.csv("fiveLet.csv")
setwd("~/Desktop/R.Projects/beatingWordle/makeApp")
fiveLet <-read.csv("fiveLet.csv")
write.csv(fiveLet, file = "fiveLet.csv")
fiveLet <-read.csv("fiveLet.csv")
fiveLet <-read.csv("fiveLet.csv")
library("shiny")
source("myUIBW.R")
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
First
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
ossibleWords$word
possibleWords$word
####         setup          ####
library(tidyverse)
words <-read.csv("valid_solutions.csv")
fiveLet <- words %>%
mutate(let1 = str_sub(words$word, 1,1)) %>%
mutate(let2 = str_sub(words$word, 2,2)) %>%
mutate(let3 = str_sub(words$word, 3,3)) %>%
mutate(let4 = str_sub(words$word, 4,4)) %>%
mutate(let5 = str_sub(words$word, 5,5))
alphabet <- c("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z")
myWord <- matrix(nrow = 26, ncol = 5)
contain <- vector(length = 5, mode = "list")
notContain <- vector(length = 26, mode = "list")
notHere <- matrix(nrow = 26, ncol = 5)
####      Input Info       ####
# put greens here
First <- ""
Second <- ""
Third <- ""
Fourth <- ""
Fifth <- ""
# put yellows here
yellow <- ""
#put greys here
grey <- ""
# when a letter is correct but not in this spot
notFirst <- ""
notSecond <- ""
notThird <- ""
notFourth <- ""
notFifth <- ""
#
####        run this        ####
contain <-c(str_split(yellow,"",n=nchar(yellow), simplify = T))[1:5]
contain[is.na(contain)] <- ""
notContain <- c(str_split(grey,"",n=nchar(grey), simplify =T))[1:nchar(grey)]
notContain[is.na(notContain)] <- ""
notHere[,1] <- c(str_split(notFirst,"",n=nchar(notFirst), simplify = T))[1:26]
notHere[,2] <- c(str_split(notSecond,"",n=nchar(notSecond), simplify = T))[1:26]
notHere[,3] <- c(str_split(notThird,"",n=nchar(notThird), simplify = T))[1:26]
notHere[,4] <- c(str_split(notFourth,"",n=nchar(notFourth), simplify = T))[1:26]
notHere[,5] <- c(str_split(notFifth,"",n=nchar(notFifth), simplify = T))[1:26]
notHere[is.na(notHere)] <- ""
myWord[,1] <- if(First==""){alphabet}else{First}
myWord[,2] <- if(Second==""){alphabet}else{Second}
myWord[,3] <- if(Third==""){alphabet}else{Third}
myWord[,4] <- if(Fourth==""){alphabet}else{Fourth}
myWord[,5] <- if(Fifth==""){alphabet}else{Fifth}
possibleWords <- fiveLet %>%
filter(let1 %in% myWord[,1]) %>%
filter(let2 %in% myWord[,2]) %>%
filter(let3 %in% myWord[,3]) %>%
filter(let4 %in% myWord[,4]) %>%
filter(let5 %in% myWord[,5]) %>%
filter(grepl(contain[1],word)) %>%
filter(grepl(contain[2],word)) %>%
filter(grepl(contain[3],word)) %>%
filter(grepl(contain[4],word)) %>%
filter(grepl(contain[5],word)) %>%
filter(!(let1 %in% notContain)) %>%
filter(!(let2 %in% notContain)) %>%
filter(!(let3 %in% notContain)) %>%
filter(!(let4 %in% notContain)) %>%
filter(!(let5 %in% notContain)) %>%
filter(!(let1 %in% notHere[,1])) %>%
filter(!(let2 %in% notHere[,2])) %>%
filter(!(let3 %in% notHere[,3])) %>%
filter(!(let4 %in% notHere[,4])) %>%
filter(!(let5 %in% notHere[,5]))
allLetters <- matrix(nrow = 5*nrow(possibleWords), ncol = 1)
allLetters[,1] <-c(possibleWords$let1,possibleWords$let2, possibleWords$let3,
possibleWords$let4, possibleWords$let5)
allLetters <- as.data.frame(allLetters) %>%
group_by(V1) %>%
summarize(count = n()) %>%
rename(letter = V1)
possibleWords$score <- score(possibleWords$word)
possibleWords <- possibleWords %>%
arrange(-score)
View(possibleWords)
score <- function(x) {
i=1
score <- vector(length = length(x))
for(i in 1:length(x)) {
word <- x[i]
score[i] <- allLetters %>%
filter(letter == substr(word,1,1)|
letter == substr(word,2,2)|
letter == substr(word,3,3)|
letter == substr(word,4,4)|
letter == substr(word,5,5)) %>%
select(count) %>%
sum()
}
score
}
possibleWords$word
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
View(possibleWords)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
containInput
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
output$debug <- renderText(myInfo)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
output$debug <- renderTable(Second)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
myUIBW <- fluidPage(
#title
titlePanel("Beating Wordle", windowTitle = "Beating Wordle"),
sidebarLayout(
mainPanel(
containInput,
notContainInput,
myWord1Input,
myWord2Input,
myWord3Input,
myWord4Input,
myWord5Input,
notHere1Input,
notHere2Input,
notHere3Input,
notHere4Input,
notHere5Input),
sidebarPanel(
tableOutput("table")
),
fluid = TRUE
)
)
library("shiny")
source("myUIBW.R")
source("server2.R")
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
library("shiny")
source("myUIBW.R")
source("server2.R")
shinyApp(ui = myUIBW, server = myServerBW)
shinyApp(ui = myUIBW, server = myServerBW)
fiveLet <- words %>%
mutate(let1 = str_sub(words$word, 1,1)) %>%
mutate(let2 = str_sub(words$word, 2,2)) %>%
mutate(let3 = str_sub(words$word, 3,3)) %>%
mutate(let4 = str_sub(words$word, 4,4)) %>%
mutate(let5 = str_sub(words$word, 5,5))
View(fiveLet)
